["package service", "", "import (", "\t\"errors\"", "\t\"go-Beitler-api/repository\"", "\t\"time\"", ")", "", "type MdsService interface {", "\tDelete(id int) error", "\tCreate(entry repository.MdsEntry) (int, error)", "\tGetAll() ([]repository.MdsEntry, error)", "}", "", "type mdsService struct {", "\trepo repository.MdsRepository", "}", "", "func NewMdsService(repo repository.MdsRepository) MdsService {", "\treturn &mdsService{repo}", "}", "", "func (s *mdsService) Delete(id int) error {", "\treturn s.repo.Delete(id)", "}", "", "func (s *mdsService) Create(entry repository.MdsEntry) (int, error) {", "\t// Validate required fields", "\tif entry.Name == \"\" {", "\t\treturn 0, errors.New(\"name is required\")", "\t}", "", "\tif entry.EffectiveFrom.IsZero() {", "\t\treturn 0, errors.New(\"effective from date is required\")", "\t}", "", "\tif entry.EffectiveTo.IsZero() {", "\t\treturn 0, errors.New(\"effective to date is required\")", "\t}", "", "\t// Validate effective to date is not earlier than effective from", "\tif entry.EffectiveTo.Before(entry.EffectiveFrom) {", "\t\treturn 0, errors.New(\"effective to date cannot be earlier than effective from date\")", "\t}", "", "\treturn s.repo.Create(entry)", "}", "", "func (s *mdsService) GetAll() ([]repository.MdsEntry, error) {", "\treturn s.repo.GetAll()", "}"]
