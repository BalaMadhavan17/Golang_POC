["package handler","","import (","\t\"encoding/json\"","\t\"go-Beitler-api/model\"","\t\"go-Beitler-api/service\"","\t\"net/http\"","\t\"strconv\"","\t\"github.com/gorilla/mux\"",")","","type MdsHandler struct {","\tservice service.MdsService","}","","type PaginatedResponse struct {","\tData       []model.MdsEntry `json:\"data\"`","\tTotal      int              `json:\"total\"`","\tPage       int              `json:\"page\"`","\tPerPage    int              `json:\"perPage\"`","\tTotalPages int              `json:\"totalPages\"`","}","","func NewMdsHandler(service service.MdsService) *MdsHandler {","\treturn &MdsHandler{service}","}","","func (h *MdsHandler) Create(w http.ResponseWriter, r *http.Request) {","\tvar mds model.MdsEntry","","\tif err := json.NewDecoder(r.Body).Decode(&mds); err != nil {","\t\thttp.Error(w, \"Invalid request body\", http.StatusBadRequest)","\t\treturn","\t}","","\tif err := mds.Validate(); err != nil {","\t\tresponse := map[string]string{\"error\": err.Error()}","\t\tw.Header().Set(\"Content-Type\", \"application/json\")","\t\tw.WriteHeader(http.StatusBadRequest)","\t\tjson.NewEncoder(w).Encode(response)","\t\treturn","\t}","","\tid, err := h.service.Create(&mds)","\tif err != nil {","\t\thttp.Error(w, \"Failed to create MDS entry\", http.StatusInternalServerError)","\t\treturn","\t}","","\tresponse := map[string]interface{}{","\t\t\"id\":      id,","\t\t\"message\": \"MDS entry has been saved successfully.\",","\t}","","\tw.Header().Set(\"Content-Type\", \"application/json\")","\tw.WriteHeader(http.StatusCreated)","\tjson.NewEncoder(w).Encode(response)","}","func (h *MdsHandler) GetAll(w http.ResponseWriter, r *http.Request) {","\tentries, err := h.service.GetAll()","\tif err != nil {","\t\thttp.Error(w, \"Failed to retrieve MDS entries\", http.StatusInternalServerError)","\t\treturn","\t}","","\t// Get pagination parameters","\tpageStr := r.URL.Query().Get(\"page\")","\tperPageStr := r.URL.Query().Get(\"perPage\")","\tsearch := r.URL.Query().Get(\"search\")","","\tpage := 1","\tperPage := 10","","\tif p, err := strconv.Atoi(pageStr); err == nil && p > 0 {","\t\tpage = p","\t}","","\tif pp, err := strconv.Atoi(perPageStr); err == nil && (pp == 10 || pp == 20 || pp == 30) {","\t\tperPage = pp","\t}","","\t// Filter by search term if provided","\tvar filteredEntries []model.MdsEntry","\tif search != \"\" {","\t\tfor _, entry := range entries {","\t\t\tif containsIgnoreCase(entry.Name, search) || containsIgnoreCase(entry.Comments, search) || containsIgnoreCase(entry.ReferenceNo, search) {","\t\t\t\tfilteredEntries = append(filteredEntries, entry)","\t\t\t}","\t\t}","\t} else {","\t\tfilteredEntries = entries","\t}","","\ttotal := len(filteredEntries)","\ttotalPages := (total + perPage - 1) / perPage","","\t// Ensure page is within bounds","\tif page > totalPages && totalPages > 0 {","\t\tpage = totalPages","\t}","","\t// Calculate slice indices for pagination","\tstart := (page - 1) * perPage","\tend := start + perPage","\tif end > total {","\t\tend = total","\t}","","\t// Get paginated data","\tvar pagedEntries []model.MdsEntry","\tif start < total {","\t\tpagedEntries = filteredEntries[start:end]","\t}","","\tresponse := PaginatedResponse{","\t\tData:       pagedEntries,","\t\tTotal:      total,","\t\tPage:       page,","\t\tPerPage:    perPage,","\t\tTotalPages: totalPages,","\t}","","\tw.Header().Set(\"Content-Type\", \"application/json\")","\tjson.NewEncoder(w).Encode(response)","}","","func containsIgnoreCase(s, substr string) bool {","\ts, substr = strings.ToLower(s), strings.ToLower(substr)","\treturn strings.Contains(s, substr)","}","func (h *MdsHandler) Delete(w http.ResponseWriter, r *http.Request) {","\tvars := mux.Vars(r)","\tid, err := strconv.Atoi(vars[\"id\"])","\tif err != nil {","\t\thttp.Error(w, \"Invalid ID\", http.StatusBadRequest)","\t\treturn","\t}","","\terr = h.service.Delete(id)","\tif err != nil {","\t\thttp.Error(w, \"Failed to delete MDS entry\", http.StatusInternalServerError)","\t\treturn","\t}","","\tw.WriteHeader(http.StatusNoContent)","}","","func (h *MdsHandler) GetTemplate(w http.ResponseWriter, r *http.Request) {","\ttemplate, err := h.service.GetTemplate()","\tif err != nil {","\t\thttp.Error(w, \"Failed to generate template\", http.StatusInternalServerError)","\t\treturn","\t}","","\tw.Header().Set(\"Content-Type\", \"text/csv\")","\tw.Header().Set(\"Content-Disposition\", \"attachment; filename=mds_template.csv\")","\tw.Write(template)","}"]
