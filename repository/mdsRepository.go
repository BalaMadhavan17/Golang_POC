["package repository","","import (","\t\"database/sql\"","\t\"time\"",")","","type MdsEntry struct {","\tID            int","\tName          string","\tComments      string","\tEffectiveFrom time.Time","\tEffectiveTo   time.Time","\tIsPPAgreed    bool","\tCreatedAt     time.Time","}","","type MdsRepository interface {","\tDelete(id int) error","\tCreate(entry *MdsEntry) (int, error)","\tGetAll() ([]MdsEntry, error)","}","","type mdsRepository struct {","\tdb *sql.DB","}","","func NewMdsRepository(db *sql.DB) MdsRepository {","\treturn &mdsRepository{db}","}","","func (r *mdsRepository) Delete(id int) error {","\t_, err := r.db.Exec(\"DELETE FROM mdsListing WHERE id=?\", id)","\treturn err","}","","func (r *mdsRepository) Create(entry *MdsEntry) (int, error) {","\tresult, err := r.db.Exec(\"INSERT INTO mdsListing (name, comments, effective_from, effective_to, is_pp_agreed, created_at) VALUES (?, ?, ?, ?, ?, ?)\",","\t\tentry.Name, entry.Comments, entry.EffectiveFrom, entry.EffectiveTo, entry.IsPPAgreed, time.Now())","\t","\tif err != nil {","\t\treturn 0, err","\t}","\t","\tid, err := result.LastInsertId()","\treturn int(id), err","}","","func (r *mdsRepository) GetAll() ([]MdsEntry, error) {","\trows, err := r.db.Query(\"SELECT id, name, comments, effective_from, effective_to, is_pp_agreed, created_at FROM mdsListing ORDER BY id DESC\")","\t","\tif err != nil {","\t\treturn nil, err","\t}","\tdefer rows.Close()","\t","\tvar entries []MdsEntry","\t","\tfor rows.Next() {","\t\tvar entry MdsEntry","\t\terr := rows.Scan(&entry.ID, &entry.Name, &entry.Comments, &entry.EffectiveFrom, &entry.EffectiveTo, &entry.IsPPAgreed, &entry.CreatedAt)","\t\tif err != nil {","\t\t\treturn nil, err","\t\t}","\t\tentries = append(entries, entry)","\t}","\t","\treturn entries, nil","}"]
