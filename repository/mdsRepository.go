["package repository", "", "import (", "\t\"database/sql\"", "\t\"time\"", ")", "", "type MDS struct {", "\tID            int", "\tName          string", "\tComments      string", "\tEffectiveFrom time.Time", "\tEffectiveTo   time.Time", "\tIsPPAgreed    bool", "}", "", "type MdsRepository interface {", "\tDelete(id int) error", "\tCreate(mds *MDS) (int, error)", "}", "", "type mdsRepository struct {", "\tdb *sql.DB", "}", "", "func NewMdsRepository(db *sql.DB) MdsRepository {", "\treturn &mdsRepository{db}", "}", "", "func (r *mdsRepository) Delete(id int) error {", "\t_, err := r.db.Exec(\"DELETE FROM mdsListing WHERE id=?\", id)", "\treturn err", "}", "", "func (r *mdsRepository) Create(mds *MDS) (int, error) {", "\tresult, err := r.db.Exec(\"INSERT INTO mdsListing (name, comments, effective_from, effective_to, is_pp_agreed) VALUES (?, ?, ?, ?, ?)\",", "\t\tmds.Name, mds.Comments, mds.EffectiveFrom, mds.EffectiveTo, mds.IsPPAgreed)", "\tif err != nil {", "\t\treturn 0, err", "\t}", "\tid, err := result.LastInsertId()", "\treturn int(id), err", "}"]
