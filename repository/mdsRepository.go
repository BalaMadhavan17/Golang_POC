["package repository","","import (","\t\"database/sql\"","\t\"go-Beitler-api/model\"","\t\"log\"","\t\"time\"",")","","type MdsRepository interface {","\tCreate(mds *model.MdsEntry) (int, error)","\tGetAll() ([]model.MdsEntry, error)","\tDelete(id int) error","}","","type mdsRepository struct {","\tdb *sql.DB","}","","func NewMdsRepository(db *sql.DB) MdsRepository {","\treturn &mdsRepository{db}","}","","func (r *mdsRepository) Create(mds *model.MdsEntry) (int, error) {","\tmds.CreatedAt = time.Now()","","\tquery := `INSERT INTO mds_entries (name, comments, effective_from, effective_to, is_pp_agreed, document_path, created_at)","\t\t\tVALUES (?, ?, ?, ?, ?, ?, ?)`","","\tresult, err := r.db.Exec(query, mds.Name, mds.Comments, mds.EffectiveFrom, mds.EffectiveTo,","\t\tmds.IsPPAgreed, mds.DocumentPath, mds.CreatedAt)","\tif err != nil {","\t\tlog.Printf(\"Error creating MDS entry: %v\", err)","\t\treturn 0, err","\t}","","\tid, err := result.LastInsertId()","\tif err != nil {","\t\treturn 0, err","\t}","","\treturn int(id), nil","}","","func (r *mdsRepository) GetAll() ([]model.MdsEntry, error) {","\tquery := `SELECT id, name, comments, effective_from, effective_to, is_pp_agreed, document_path, created_at","\t\t\tFROM mds_entries ORDER BY created_at DESC`","","\trows, err := r.db.Query(query)","\tif err != nil {","\t\tlog.Printf(\"Error querying MDS entries: %v\", err)","\t\treturn nil, err","\t}","\tdefer rows.Close()","","\tvar entries []model.MdsEntry","\tfor rows.Next() {","\t\tvar entry model.MdsEntry","\t\terr := rows.Scan(&entry.ID, &entry.Name, &entry.Comments, &entry.EffectiveFrom,","\t\t\t&entry.EffectiveTo, &entry.IsPPAgreed, &entry.DocumentPath, &entry.CreatedAt)","\t\tif err != nil {","\t\t\tlog.Printf(\"Error scanning MDS entry: %v\", err)","\t\t\treturn nil, err","\t\t}","\t\tentries = append(entries, entry)","\t}","","\tif err = rows.Err(); err != nil {","\t\tlog.Printf(\"Error iterating MDS entries: %v\", err)","\t\treturn nil, err","\t}","","\treturn entries, nil","}","","func (r *mdsRepository) Delete(id int) error {","\tquery := `DELETE FROM mds_entries WHERE id = ?`","\t_, err := r.db.Exec(query, id)","\tif err != nil {","\t\tlog.Printf(\"Error deleting MDS entry: %v\", err)","\t\treturn err","\t}","\treturn nil","}"]
